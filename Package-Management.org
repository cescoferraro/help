#+PROPERTY: header-args :tangle "./.org-mode-package-management.emacs.el" :results output silent

Never compile this.
#+NAME: org_gcr_2017-07-21_mara_6CF4E40C-3850-46FA-ACAF-C13CF7C2A765
#+BEGIN_SRC emacs-lisp :comments no
;; -*- no-byte-compile: t; -*-
#+END_SRC
* Watch What You Eat
  :PROPERTIES:
  :ID:       org_gcr_2017-05-12_mara:BD133C8B-8DFF-45C0-967D-CB83693C54B4
  :END:
  :LOGBOOK:
  - Refiled on [2017-07-21 Fri 20:44] \\
    Clarify
  :END:
** Use-Package
:PROPERTIES:
:ID:       org_gcr_2018-04-11T09-44-43-05-00_mara:55083825-349A-44D0-8026-2E652BE228A9
:END:
Configure ~use-package~.

Sysop is likely to use this infrequently.

Start EMACS with this command:

#+BEGIN_EXAMPLE
emacs --debug-init --no-init-file --no-splash --background-color white --foreground-color black --vertical-scroll-bars --eval '(switch-to-buffer "*Messages*")' --name O2B-TEST --title O2B-TEST --load ~/src/help/.org-mode-package-management.emacs.el
#+END_EXAMPLE

#+NAME: org_gcr_2017-05-12_mara_AD27B44D-A88A-421F-9418-EE1B9E1977D5
#+BEGIN_SRC emacs-lisp
(load-file "~/src/help/.org-mode-fundamentals.emacs.el")
#+END_SRC

*Code requiring package-management can only follow this block.*

Before ELPA, I used SVN to manage software packages for EMACS. After ELPA,
I used ELPA-packages. Now this system uses MELPA and GNU. MELPA packages always
have their issues fixed very quickly. GNU packages rarely have issues.

Initialize Package.

#+NAME: org_gcr_2017-05-12_mara_0F6BBBBA-259E-46FC-AD7F-C954149CCCEA
#+BEGIN_SRC emacs-lisp
(package-initialize)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives
             '("gnu" . "http://elpa.gnu.org/packages/") t)
#+END_SRC

Use-Package is the most configurable and performant way to manage ELPA
packages. Startup speed matters but not right now so don't use ~:defer~.

Add the Use-Package distribution the load path.

#+NAME: org_gcr_2017-05-12_mara_867E1E1D-48E5-47C7-9B39-FD29F137665D
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path"~/src/use-package")
#+END_SRC

Load Use-Package and it's partner Diminish. Every package loaded before this
point uses ~require~. Every package loaded after this point uses ~use-package~.

#+NAME: org_gcr_2017-05-12_mara_3982F502-880C-4DF4-A1DF-07DA3EAA7D78
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
(use-package diminish)
#+END_SRC
** El-Get
:PROPERTIES:
:ID:       org_gcr_2018-04-11T09-44-43-05-00_mara:925A5891-AB13-4972-9C95-3B49B7D47885
:END:
EL-Get handles things that don't easily fit anywhere else.

Initialize EL-Get.

#+NAME: org_gcr_2018-04-11T09-44-43-05-00_mara_CB6F4AFF-CBA8-43F5-AFCA-422CDE0FE6EA
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))
#+end_src

#+NAME: org_gcr_2018-04-11T09-44-43-05-00_mara_CB81CA6E-E912-41EB-ADB4-A60871EA967B
#+begin_src emacs-lisp
(setq help/el-get-packages nil)
#+end_src

Make it really easy to remind yourself and others what EMACS really stands for
(in this case it is fun).

#+NAME: org_gcr_2018-04-11T09-44-43-05-00_mara_4D78A420-EF7B-49FE-A888-D764F92E54E6
#+begin_src emacs-lisp
(add-to-list
 'el-get-sources
 '(:name emacs-name
          :type http
          :url "http://www.splode.com/~friedman/software/emacs-lisp/src/emacs-name.el"
          :features emacs-name
          :autoloads nil
          :website "http://www.splode.com/"
          :description "emacs acronym expansions"))
(add-to-list 'help/el-get-packages 'emacs-name)
#+end_src

It is not good to flame people on the Internet. It is good to /know/ what it is
all about, and here is a way to see some examples of the absurdity of it all.

#+NAME: org_gcr_2018-04-11T09-44-43-05-00_mara_CB884AE4-47C9-47A3-A322-1817E6E51A6E
#+begin_src emacs-lisp
(add-to-list
 'el-get-sources
 '(:name flame
          :type http
          :url "http://www.splode.com/~friedman/software/emacs-lisp/src/flame.el"
          :features flame
          :autoloads nil
          :website "http://www.splode.com/"
          :description "automatic generation of flamage, as if we needed more"))
(add-to-list 'help/el-get-packages 'flame)
#+end_src

People love horoscopes, so, provide them.

#+NAME: org_gcr_2018-04-11T09-44-43-05-00_mara_2A56F5B4-EDF2-4F41-BD96-3B188C0EBBF8
#+begin_src emacs-lisp
(add-to-list
 'el-get-sources
 '(:name horoscope
          :type http
          :url "http://www.splode.com/~friedman/software/emacs-lisp/src/horoscope.el"
          :features horoscope
          :autoloads t
          :website "http://www.splode.com/"
          :description "generate horoscopes"))
(add-to-list 'help/el-get-packages 'horoscope)
#+end_src

James Parry [fn:c99fd633: https://en.wikipedia.org/wiki/James_Parry] must always
be honored.

#+NAME: org_gcr_2018-04-11T09-44-43-05-00_mara_40D6F67F-CB60-4D03-95D1-0A32D460D366
#+begin_src emacs-lisp
(add-to-list
 'el-get-sources
 '(:name kibologize
          :type http
          :url "http://www.splode.com/~friedman/software/emacs-lisp/src/kibologize.el"
          :features kibologize
          :autoloads nil
          :website "http://www.splode.com/"
          :description "generate ravings about kibology, in the style of kibo"))
(add-to-list 'help/el-get-packages 'kibologize)
(defun help/kibologize-insert ()
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively 'kibologize)))
#+end_src

You might not always remember your shopping list, but we will remember it for
youâ€¦ though not necessarily for wholesale.

#+NAME: org_gcr_2018-04-11T09-44-43-05-00_mara_4BC2EFC6-D51B-4D90-8486-5DB2B8B1E02E
#+begin_src emacs-lisp
(add-to-list
 'el-get-sources
 '(:name shop
          :type http
          :url "http://www.splode.com/~friedman/software/emacs-lisp/src/shop.el"
          :features shop
          :autoloads nil
          :website "http://www.splode.com/"
          :description "generate random shopping lists"))
(add-to-list 'help/el-get-packages 'shop)
#+end_src

Do you remember when those great AT&T adds were on television and it changed
your life and bought you a kitten? You will.

#+NAME: org_gcr_2018-04-11T09-44-43-05-00_mara_BF33EE53-4A53-46A9-A6BF-4F7419A082F9
#+begin_src emacs-lisp
(add-to-list
 'el-get-sources
 '(:name youwill
          :type http
          :url "http://www.splode.com/~friedman/software/emacs-lisp/src/youwill.el"
          :features youwill
          :autoloads t
          :website "http://www.splode.com/"
          :description "generate meaningless marketing hype"))
(add-to-list 'help/el-get-packages 'youwill)
(defun help/youwill-insert ()
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively 'youwill)))
#+end_src

Ask el-get to make sure that those desired packages are installed.

#+NAME: org_gcr_2018-04-11T09-44-43-05-00_mara_2E404438-B898-448B-98AD-B1A5468DEA80
#+begin_src emacs-lisp
(el-get 'sync help/el-get-packages)
#+end_src
** Helper
:PROPERTIES:
:ID:       org_gcr_2018-04-11T09-44-43-05-00_mara:27CF9494-7866-4AB9-A2AD-254F84224658
:END:
Speed up code execution. Review as desired.

#+NAME: org_gcr_2017-07-21_mara_E9CF2CB2-D837-41C3-A56A-B2ACFB9E228F
#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :ensure t
  :config
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode)
  (setq auto-compile-display-buffer 1))
#+END_SRC
